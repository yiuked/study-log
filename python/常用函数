1.raw_input("名字:")	从终端获取一个输入值
2.range(stop) 			生成一个整数列表
3.len("abc") 			得到一个字符串或者列表、元组的长度
4.help("raw_input") 	获取函数帮助
5.enumerate 			用于循环时取索引 for key,val in enumerate(arr)
6.dir([obj]) 			显示对象属性
7.str("123") 			转为字符串
8.type([obj]) 			返回对象类型

数学函数
abs(-4) 		绝对值
int(x [,base])	将x转换为一个整数
long(x [,base] )将x转换为一个长整数
float(x)		将x转换到一个浮点数
complex(real [,imag])	创建一个复数
str(x)			将对象 x 转换为字符串
repr(x)			将对象 x 转换为表达式字符串
eval(str)		用来计算在字符串中的有效Python表达式,并返回一个对象
tuple(s)		将序列 s 转换为一个元组
list(s)			将序列 s 转换为一个列表
set(s)			转换为可变集合
dict(d)			创建一个字典。d 必须是一个序列 (key,value)元组。
frozenset(s)	转换为不可变集合
chr(x)			将一个整数转换为一个字符
unichr(x)		将一个整数转换为Unicode字符
ord(x)			将一个字符转换为它的整数值
hex(x)			将一个整数转换为一个十六进制字符串
oct(x) 			将一个整数转换为一个八进制字符串


特殊
_ 							表示最后一个表达式
print "%s,%d" %("abc",123)	格式化输出

操作符
// 		不留余数
** 		乘方

面向对象
class ClassName(parentClassName):
	def __init__(self, name="json"): 

模块

小提示
# -*- coding: UTF-8 -*- 		解决不支持中文问题
print 							默认会在输出完后换行，如果不需要，可以在结尾加上 ”,“,eg: print name,
\ 								语句太长，可以使用 \ 换行
x,y,z = 1,2,3 					多元赋值
x,y = y,x 						变量值交换
var[:]、var[:3]、var[:-3]、var[::]、var[::1]、var[::2]、var[::-1]
python切换，以上表达式，如果val值为"123456",结果分别为:
123456
123
456
123456
123456
135
654321