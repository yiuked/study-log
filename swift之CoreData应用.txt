1.新建项目的时候选择 use coredata，appdelegate中会自动多出一些内容，
  如果新建项目时没有选择，那么，建立一个空的项目把相应的代码复制过去就行了.
选择使用 coredata的项目，会自动建立一个xxx.xcdatamodeld的文件，
点开xcdatamodeld文件，设置对应的attribute就行，如
name String
age  Int16
选择对应的类型，其它无需设置.
 
2.创建一个空的swift文件，内容:
import Foundation
import CoreData

class TestEntity: NSManagedObject {
	@NSManaged var name: String
	@NSManaged var age: Int16
}

添加的属性与之前在xcdatamodeld文件中添加的对应则可.

3.要操作CoreData先获取句柄，句柄保存在AppDelegate中，因此我们需要通过以下代码来获取:
var appDel  = UIApplication.sharedApplication().delegate as AppDelegate //获取appdel
var context = appDel.managedObjectContext



//写入数据
//这里如果做了转型的话其实也可以直接类似类的属性进行赋值一样
var entity = NSEntityDescription.entityForName("TestEntity", inManagedObjectContext: context!)
var person = NSManagedObject(entity: entity!, insertIntoManagedObjectContext: context)
person.setValue("bob", forKey: "name")
person.setValue(123, forKey: "phonenum")
var error:NSError?
if (context?.save(&error) == nil){
	println("could not save \(error)")
}else{
	println("save is ok  \(context)")
}

//获取数据
var fectchRequest = NSFetchRequest(entityName: "TestEntity")
var fectchRuslt = context?.executeFetchRequest(fectchRequest, error: &error)
println( fectchRuslt?.count)//查询有多少个记录


var fectchRequest = NSFetchRequest(entityName: "TestEntity")

//根据name排序，后面有个selectot参数，直接使用内置的方法进行查询
var sortDescrpitor = NSSortDescriptor(key: "name", ascending: true,selector: Selector("localizedStandardCompare:")) 
var zoename = "zoe" 
var predicate:NSPredicate = NSPredicate(format: "name contains '\(zoename)'")!
fectchRequest.sortDescriptors = [sortDescrpitor]
fectchRequest.predicate = predicate
var fectchRuslt = context?.executeFetchRequest(fectchRequest, error: &error) as [NSManagedObject]?


//删除数据
//这里的fetchrsult就是我们通过request获得的结果，然后遍历这些结果，让context来删除它们。
var fetchRsult:[SectionEntity] = context?.executeFetchRequest(sectionFetchRequst, error: &error) as [SectionEntity]
if (error != nil) {
    println("dele error:\(error)")
}else{
    for one:NSManagedObject in fetchRsult {
	println(one.description)
	context?.deleteObject(one)
    }
}
if (context?.hasChanges != nil){
    context?.save(&error)
}else{
    println("context save error:\(error)")

}